---
name: Generate Caches

"on":
  push:

jobs:
  generate-caches:
    name: Generate Caches for the Rust project
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Rust Channel
        id: toolchain
        shell: bash
        working-directory: ${{ github.workspace }}/scripts
        run: python3 utils.py extract-rust-channel

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "clippy, rustfmt"
          toolchain: ${{ steps.toolchain.outputs.version }}
          targets: ${{ matrix.target }}

      - name: Define prefix key and shared key
        id: cache-keys
        shell: bash
        run: |
          os=${{ matrix.os }}
          target=${{ matrix.target }}
          lock_hash=${{ hashFiles('**/Cargo.lock') }}
          echo "prefix-key=rust-$os-$target" >> "$GITHUB_OUTPUT"
          echo "shared-key=$lock_hash" >> "$GITHUB_OUTPUT"

      # Here, we suppose the 'Cargo.lock' file is present in the repository.
      # If not, we should add a step to generate it.
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ steps.cache-keys.outputs.prefix-key }}
          shared-key: ${{ steps.cache-keys.outputs.shared-key }}
          cache-targets: true
          cache-all-crates: true

      - name: Run check to generate clippy cache
        if: ${{ steps.cache-keys.outputs.cache-hit }} == 'false'
        shell: bash
        run: |
          cargo check \
          --workspace \
          --all-features \
          --all-targets \
          --locked \
          --target ${{ matrix.target }}

      - name: Run build to generate test and release cache
        if: ${{ steps.cache-keys.outputs.cache-hit }} == 'false'
        shell: bash
        run: |
          cargo build \
          --release \
          --workspace \
          --all-features \
          --all-targets \
          --locked \
          --target ${{ matrix.target }}
