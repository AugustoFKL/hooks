---
name: Lint Rust Code

"on":
  # Since the repository is public, there are no concerns regarding CI usage.
  push:

# Concurrency serves to prevent simultaneous execution of multiple identical
# workflows in the same branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Rust Code
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: "x86_64-unknown-linux-gnu"
          - os: ubuntu-20.04
            target: "x86_64-unknown-linux-gnu"
          - os: macos-12
            target: "x86_64-apple-darwin"
          - os: macos-12
            target: "aarch64-apple-darwin"
          - os: windows-2022
            target: "x86_64-pc-windows-msvc"

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Extract Rust Channel
        shell: bash
        id: toolchain
        run: |
          version=$(grep -Eo 'channel = \"[0-9\.]+\"' rust-toolchain.toml | \
          grep -Eo '[0-9\.]+')
          echo "version=$version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "clippy, rustfmt"
          toolchain: ${{ steps.toolchain.outputs.version }}
          targets: ${{ matrix.target }}

      - name: Define prefix key and shared key
        id: cache-keys
        shell: bash
        run: |
          os=${{ matrix.os }}
          target=${{ matrix.target }}
          lock_hash=${{ hashFiles('**/Cargo.lock') }}
          echo "prefix-key=rust-$os-$target" >> "$GITHUB_OUTPUT"
          echo "shared-key=$lock_hash" >> "$GITHUB_OUTPUT"

      # Here, we suppose the 'Cargo.lock' file is present in the repository.
      # If not, we should add a step to generate it.
      # TODO: Add a logic to delete old caches.
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ steps.cache-keys.outputs.prefix-key }}
          shared-key: ${{ steps.cache-keys.outputs.shared-key }}
          cache-targets: true
          cache-all-crates: true

      - name: Run Rustfmt
        run: cargo fmt -- --check

      - name: Run Clippy
        shell: bash
        run: |
            cargo clippy \
            --workspace \
            --all-features \
            --all-targets \
            --locked \
            --target ${{ matrix.target }}
